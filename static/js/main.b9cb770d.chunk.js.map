{"version":3,"sources":["components/excel.js","api/Account.js","components/home.jsx","App.js","index.js"],"names":["Excel","onImportExcel","file","files","target","fileReader","FileReader","onload","event","result","workbook","XLSX","type","data","sheet","Sheets","hasOwnProperty","concat","sheet_to_json","console","log","props","getChildrenMsg","e","error","readAsBinaryString","Button","className","accept","onChange","this","Component","accountlist","a","window","ethereum","request","method","accounts","contracts","mainnet","sender","kovan","kovanConfig","Web3","require","Home","useState","account","setaccount","tokenAddress","settokenAddress","decimals","setdecimals","amounts","setamounts","selected","setselected","defaultTab","setdefaultTab","tablelist","settablelist","transactionHash","settransactionHash","batchSendToken","setbatchSendToken","token","settoken","totalAmount","settotalAmount","addressArray","setaddressArray","amountArray","setamountArray","allowance","setallowance","symbol","setsymbol","mybalance","setmybalance","btndisabled","setbtndisabled","pageSize","ethBalance","setethBalance","showLoading","setshowLoading","tips","settips","show","setShow","showChange","setshowChange","showNet","setshowNet","web3","givenProvider","mutliSender","senderAddress","on","arr","setTimeout","chainId","getChainId","eth","initContract","Contract","senderAbi","connectWallet","Accounts","then","handleInput","name","value","handleRadio","useEffect","nextPage","amountlist","split","map","item","push","address","amount","parseFloat","obj","transaction","tokenAbi","setTotal","getAllowance","getSymbol","getBalanceOf","getBalance","utils","fromWei","lines","index","length","line","trim","values","toWei","isAddress","methods","call","balanceOf","sendToken","totalSupply","approve","send","from","catch","err","toString","transIndex","batchSendTokenArr","addressArr","slice","amountArr","Math","ceil","Modal","aria-labelledby","centered","onHide","Body","Spinner","animation","variant","Alert","onClose","dismissible","Heading","onClick","Tabs","activeKey","onSelect","k","Tab","eventKey","title","Form","Group","Label","Control","str","Address","Amount","controlId","as","rows","disabled","Table","striped","bordered","hover","i","width","Check","label","href","rel","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9cb770d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button} from 'react-bootstrap';\nimport * as XLSX from 'xlsx';\n\nclass Excel extends Component {\n    onImportExcel = file => {\n        const { files } = file.target;\n        const fileReader = new FileReader();\n        fileReader.onload = event => {\n            try {\n                const { result } = event.target;\n                const workbook = XLSX.read(result, { type: 'binary' });\n                let data = [];\n                for (const sheet in workbook.Sheets) {\n                    if (workbook.Sheets.hasOwnProperty(sheet)) {\n                        data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                    }\n                }\n                console.log('Upload file successful!')\n                this.props.getChildrenMsg(data);\n            } catch (e) {\n                console.error('Unsupported file type!');\n            }\n        };\n        fileReader.readAsBinaryString(files[0]);\n    }\n    render() {\n        return (\n            <div>\n                <Button className=\"upload-wrap\">\n                    <input className=\"file-uploader\" type='file' accept='.xlsx, .xls,.csv' onChange={this.onImportExcel} />\n                    <span className=\"upload-text\">Upload file</span>\n                </Button>\n            </div >\n        );\n    }\n}\n\nexport default Excel;\n","const accountlist = async () => {\n    const { ethereum } = window;\n    if (typeof ethereum == 'undefined') {\n        return {\n            type:'error'\n        } ;\n    }\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n    return {\n        type:'success',\n        data: accounts[0]\n     }\n\n}\n\nexport default {\n    accountlist,\n}\n","import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, Form, Button, Table, Alert, Modal, Spinner } from 'react-bootstrap';\nimport Excel from './excel'\n\nimport Accounts from '../api/Account';\n\nimport tokenAbi from '../abi/ERC20.abi';\nimport senderAbi from '../abi/sender.abi';\n\nimport kovanConfig from '../config/kovan';\nimport mainnetConfig from '../config/mainnet';\n\nconst contracts = {\n    mainnet: mainnetConfig.sender,\n    kovan: kovanConfig.sender\n}\n\nconst Web3 = require('web3');\n\nexport default function Home() {\n\n    const [account, setaccount] = useState('');\n    // eslint-disable-next-line\n    const [tokenAddress, settokenAddress] = useState('');\n    const [decimals, setdecimals] = useState('18');\n    const [amounts, setamounts] = useState('');\n    const [selected, setselected] = useState('');\n    // const [list, setlist] = useState([]);\n    const [defaultTab, setdefaultTab] = useState('first');\n    const [tablelist, settablelist] = useState([]);\n    const [transactionHash, settransactionHash] = useState([]);\n    const [batchSendToken, setbatchSendToken] = useState([]);\n    const [token, settoken] = useState('');\n\n    const [totalAmount, settotalAmount] = useState(0);\n    const [addressArray, setaddressArray] = useState([]);\n    const [amountArray, setamountArray] = useState([]);\n    const [allowance, setallowance] = useState(0);\n    const [symbol, setsymbol] = useState('');\n    const [mybalance, setmybalance] = useState(0);\n    const [btndisabled, setbtndisabled] = useState(true)\n    const [pageSize] = useState(200)\n    const [ethBalance, setethBalance] = useState(0)\n    const [showLoading, setshowLoading] = useState(false);\n    const [tips, settips] = useState('');\n    const [show, setShow] = useState(false);\n    const [showChange, setshowChange] = useState(false);\n    const [showNet, setshowNet] = useState(false);\n\n    const web3 = new Web3(Web3.givenProvider);\n\n\n    var mutliSender = null;\n    var senderAddress = null;\n\n    window.ethereum.on('accountsChanged', function (arr) {\n        setaccount(arr[0])\n        setshowChange(true)\n        setTimeout(() => {\n            setshowChange(false)\n        }, 3000)\n    });\n\n    window.ethereum.on('chainChanged', (chainId) => {\n        setshowNet(true)\n        setTimeout(() => {\n            setshowNet(false)\n        }, 3000)\n    });\n\n    const getChainId = async() => {\n        const chainId = await web3.eth.getChainId();\n        initContract(chainId);\n    };\n\n    const initContract = async(chainId) => {\n        console.log('chainId', chainId);\n\n        if (chainId === 1) {\n            senderAddress = contracts.mainnet;\n        } else if (chainId === 42) {\n            senderAddress = contracts.kovan;\n        } else {\n            console.error('Unsupported network!!!!');\n            return;\n        }\n\n        console.log(\"sender address: \", senderAddress);\n\n        mutliSender = await new web3.eth.Contract(senderAbi, senderAddress);\n    };\n\n    const connectWallet = async () => {\n        await Accounts.accountlist().then(data => {\n            if (data.type === 'success') {\n                setaccount(data.data)\n            } else {\n                setShow(true)\n            }\n        });\n    }\n\n    const handleInput = (e) => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'token':\n                settokenAddress(value)\n                break;\n            case 'decimals':\n                setdecimals(value)\n                break;\n            case 'amounts':\n                setamounts(value)\n                break;\n            default: break;\n        }\n    }\n    const handleRadio = (e) => {\n        setselected(e.target.value)\n    }\n    const getChildrenMsg = (data) => {\n        console.log(data)\n        let str = '';\n        data.map(item => {\n            console.log(\"=====item\",item)\n            str += `${item.Address},${item.Amount} \\n`;\n        })\n        setamounts(str)\n    }\n    useEffect(() => {\n        if (!account || account === \"\" || !amounts || !tokenAddress || !decimals) {\n            setbtndisabled(true)\n\n        } else {\n            setbtndisabled(false)\n        }\n    }, [account, amounts, tokenAddress, decimals])\n    const nextPage = async () => {\n\n        let amountlist = amounts.split('\\n');\n        let arr = [];\n        amountlist.map(item => {\n            if (!item) return;\n            arr.push({\n                address: item.split(',')[0],\n                amount: parseFloat(item.split(',')[1]),\n            })\n        })\n\n        let obj = {\n            tokenAddress,\n            decimals,\n            transaction: arr\n        }\n        settablelist(arr)\n        console.log(\"=====\", obj)\n        setdefaultTab('second')\n\n        const token = await new web3.eth.Contract(tokenAbi, tokenAddress);\n        console.log('token address: ', tokenAddress, token);\n        settoken(token)\n\n        setTotal()\n        getAllowance(token)\n        getSymbol(token)\n        getBalanceOf(token)\n\n        const ethBalance = await web3.eth.getBalance(account);\n        console.log(\"==============ethBalance\", ethBalance,)\n        setethBalance(web3.utils.fromWei(ethBalance))\n\n    }\n    const setTotal = () => {\n        let lines = amounts.split('\\n');\n        let addressArray = [];\n        let amountArray = [];\n        let totalAmount = 0;\n        for (let index = 0; index < lines.length; index++) {\n            const line = lines[index].trim();\n            if (line.length === 0) {\n                console.log('skip empty line');\n                continue;\n            }\n            let values = line.split(',');\n\n            let address = values[0].trim();\n            let amount = web3.utils.toWei(values[1].trim());\n\n            if (!web3.utils.isAddress(address)) {\n                console.log('Invalid address: ', address);\n                continue;\n            }\n\n            addressArray.push(address);\n            amountArray.push(amount);\n\n            totalAmount += parseFloat(values[1].trim());\n        }\n        settotalAmount(totalAmount)\n        setaddressArray(addressArray)\n        setamountArray(amountArray)\n        console.log(`Total address : ${addressArray.length}, Total amount : ${totalAmount}`);\n\n    }\n    const getAllowance = async (token) => {\n        const allowance = await token.methods.allowance(account, senderAddress).call();\n        console.log(\"My allowance: \", web3.utils.fromWei(allowance));\n        setallowance(web3.utils.fromWei(allowance))\n    }\n    const getSymbol = async (token) => {\n        const symbol = await token.methods.symbol().call();\n        console.log('Token symbol: ', symbol);\n        setsymbol(symbol)\n    }\n    const getBalanceOf = async (token) => {\n        const mybalance = await token.methods.balanceOf(account).call();\n        console.log(\"My balance: \", web3.utils.fromWei(mybalance));\n        setmybalance(web3.utils.fromWei(mybalance))\n    }\n\n    const sendToken = async () => {\n        setshowLoading(true)\n        settips('waiting....')\n\n        console.log(selected)\n        const decimals = await token.methods.decimals().call();\n        console.log('Decimals: ', decimals);\n\n        // Step-1: Approve\n        if (allowance < totalAmount) {\n            if (selected === 'unlimited') {\n                const totalSupply = await token.methods.totalSupply().call();\n\n                await token.methods.approve(senderAddress, totalSupply).send({ from: account }).then(data => {\n                    console.log('transactionHash', data);\n                    settips('transactionHash')\n                    settransactionHash(data.transactionHash)\n                }).catch(err => {\n                    setshowLoading(false)\n                });\n            } else {\n                await token.methods.approve(senderAddress, web3.utils.toWei(totalAmount.toString())).send({ from: account }).then(data => {\n                    console.log('transactionHash', data);\n                    settips('transactionHash')\n                    settransactionHash(data.transactionHash)\n                }).catch(err => {\n                    setshowLoading(false)\n                });\n            }\n        } else {\n            console.log('Already have enough allowance!');\n        }\n\n        // Step-2: Sending\n        let transIndex = 0;\n        let batchSendTokenArr = [];\n        for (let index = 0; index < addressArray.length; index += pageSize) {\n            transIndex++;\n            let addressArr = addressArray.slice(index, index + pageSize);\n            let amountArr = amountArray.slice(index, index + pageSize);\n            await mutliSender.methods.batchSendToken(tokenAddress, addressArr, amountArr).send({ from: account })\n                .then(data => {\n\n                    console.log('batchSendToken', data);\n                    batchSendTokenArr.push(data.transactionHash)\n                    settips(`batchSendToken (${transIndex}/${Math.ceil(addressArray.length / pageSize)})`)\n                    if (transIndex >= Math.ceil(addressArray.length / pageSize)) {\n                        setshowLoading(false)\n                    }\n                }).catch(err => {\n                    setshowLoading(false)\n                });\n\n        }\n        setbatchSendToken(batchSendTokenArr)\n        setdefaultTab('third')\n    }\n\n\n    getChainId();\n\n    return (\n        <div className='homeBrdr'>\n\n            <Modal\n                show={showLoading}\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                onHide={() => { }}\n            >\n                <Modal.Body className='loading'>\n                    <div className=\"spinner\">\n                        <Spinner animation=\"border\" variant=\"primary\" />\n                    </div>\n                    <h4 className=\"waiting\">{tips}</h4>\n                </Modal.Body>\n            </Modal>\n\n            {show && <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n                <Alert.Heading>Please install MetaMask!</Alert.Heading>\n            </Alert>}\n            {\n                showChange && <Alert variant=\"success\">Account was changed</Alert>\n            }\n            {\n                showNet && <Alert variant=\"success\">Chain was changed</Alert>\n            }\n\n            <div className='wallet'>\n                {\n                    !account && <Button variant=\"primary\" onClick={connectWallet}>connect Wallet</Button>\n                }\n                {\n                    account && <span>{account}</span>\n                }\n            </div>\n            <Tabs activeKey={defaultTab} onSelect={(k) => setdefaultTab(k)}>\n                <Tab eventKey=\"first\" title=\"Step1. Prepare\">\n                    <div className=\"container \">\n                        <div className=\"row\">\n                            <div className=\"col-9\">\n                                <Form.Group>\n                                    <Form.Label>Token</Form.Label>\n                                    <Form.Control\n                                        name='token'\n                                        value={tokenAddress}\n                                        onChange={handleInput}\n                                    />\n                                </Form.Group>\n                            </div>\n                            <div className=\"col-3\">\n                                <Form.Group>\n                                    <Form.Label>Decimals</Form.Label>\n                                    <Form.Control\n                                        name='decimals'\n                                        value={decimals}\n                                        onChange={handleInput} />\n                                </Form.Group>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <Excel getChildrenMsg={getChildrenMsg} />\n                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                    <Form.Label>Addresses with Amounts</Form.Label>\n                                    <Form.Control\n                                        as=\"textarea\"\n                                        rows={8}\n                                        name='amounts'\n                                        value={amounts}\n                                        onChange={handleInput} />\n                                </Form.Group>\n                                <div>\n                                    <Button variant=\"primary\" onClick={nextPage} disabled={btndisabled}>Next</Button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"second\" title=\"Step2. Confirm\">\n                    <div className=\"container\">\n                        <h5>List of recipients</h5>\n                        <div className='tableBrdr'>\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>Address</th>\n                                        <th>Amount</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        tablelist.map((i, index) => (<tr key={`${i.address}_${index}`}>\n                                            <td>{i.address}</td>\n                                            <td>{i.amount}</td>\n                                        </tr>))\n                                    }\n                                </tbody>\n                            </Table>\n                        </div>\n\n                        <h5>Summary</h5>\n                        <Table bordered >\n                            <tbody>\n                                <tr>\n                                    <td width=\"50%\">\n                                        <div className='numbers'>{totalAmount} {symbol}</div>\n                                        <div className=\"tips\">Request approve amount</div>\n                                    </td>\n                                    <td>\n                                        <div className='numbers'>{allowance} {symbol}</div>\n                                        <div className=\"tips\">Your current allowance</div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width=\"50%\">\n                                        <div className='numbers'>{addressArray.length}</div>\n                                        <div className=\"tips\">Total number of addresses</div>\n                                    </td>\n                                    <td>\n                                        <div className='numbers'>{totalAmount} {symbol}</div>\n                                        <div className=\"tips\">Total number of tokens to be sent</div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width=\"50%\">\n                                        <div className='numbers'>{Math.ceil(addressArray.length / pageSize)}</div>\n                                        <div className=\"tips\">Total number of transaction needed</div>\n                                    </td>\n                                    <td>\n                                        <div className='numbers'>{mybalance} {symbol}</div>\n                                        <div className=\"tips\">Your token balance</div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width=\"50%\">\n                                        <div className='numbers' />\n                                        <div className=\"tips\">Approximate cost of operation</div>\n                                    </td>\n                                    <td>\n                                        <div className='numbers'>{ethBalance} ETH</div>\n                                        <div className=\"tips\">Your ETH balance</div>\n                                    </td>\n                                </tr>\n\n                            </tbody>\n                        </Table>\n                        <h5>Amount to Approve</h5>\n                        <Form.Group className='radioGroup'>\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Extra amount to sent\"\n                                name='approveAmount'\n                                onChange={handleRadio}\n                                value='extra'\n                            />\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Unlimited amount\"\n                                name='approveAmount'\n                                value='unlimited'\n                                onChange={handleRadio}\n                            />\n                        </Form.Group>\n                        <div>\n                            <Button variant=\"primary\" onClick={sendToken}>Submit</Button>\n                        </div>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"third\" title=\"Step3. Result\">\n                    <div className=\"container result\">\n                        <h5>transactionHash</h5>\n                        <ul className='transaction'>\n                            {\n                                transactionHash && <li><a href={`https://kovan.etherscan.io/tx/${transactionHash}`} target=\"_blank\" rel=\"noopener noreferrer\">{transactionHash}</a></li>\n                            }\n                        </ul>\n                        <h5>batchSendToken</h5>\n                        <ul>\n                            {\n                                batchSendToken && batchSendToken.map(i => (<li key={i}><a href={`https://kovan.etherscan.io/tx/${i}`} target=\"_blank\" rel=\"noopener noreferrer\">{i}</a></li>))\n                            }\n                        </ul>\n                    </div>\n                </Tab>\n            </Tabs>\n\n\n        </div>\n    );\n}\n","import Home from './components/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/custom.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}